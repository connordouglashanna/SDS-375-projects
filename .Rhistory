library(tidyverse)
library(colorspace)
library(tidytuesdayR)
library(broom)
library(ggforce)
library(ggridges)
library(ggrepel)
knitr::opts_chunk$set(echo = TRUE)
#news_orgs from Project Oasis via Data is Plural
tuesdata <- tidytuesdayR::tt_load('2022-01-11')
tuesdata <- tidytuesdayR::tt_load(2022, week = 2)
colony <- tuesdata$colony
stressor <- tuesdata$stressor
#spreading stressor
stresses <-
stressor |>
spread(stressor, stress_pct, fill = 0)
#merging the stresses data with the colony data
#removing country-level observations
bees <-
left_join(colony, stresses) |>
filter(state != "United States")
#looks like there's a typo in the column name for "Diseases"
bees <-
bees |>
rename(Diseases = Disesases)
#running a regression on colony losses
lm_ccd <-
lm(colony_lost_pct ~ Diseases + Other + `Other pests/parasites` + Pesticides + Unknown + `Varroa mites`, data = bees)
summary(lm_ccd)
#using map() to fit lm by state and season
#this gives us year-over-year results, controlling for seasonality and geography
models <-
bees |>
nest(data = -c(state)) |>
mutate(
fit = map(data, ~lm(colony_lost_pct ~ Diseases + Other + `Other pests/parasites` + Pesticides + Unknown +
`Varroa mites`, data = .x))
)
#now we have 48 models
#fetching the model for California during January-March
summary(models$fit[[4]])
#storing PCA of the bee plagues
pca_fit <-
bees |>
select(Diseases, Other, `Other pests/parasites`,
Pesticides, Unknown, `Varroa mites`) |>
na.omit() |>
scale() |>
prcomp()
pca_fit
#plotting a rotation matrix
arrow_style <- arrow(
angle = 20, length = grid::unit(8, "pt"),
ends = "first", type = "closed"
)
pca_fit |>
tidy(matrix = "rotation") |>
pivot_wider(
names_from = "PC", values_from = "value",
names_prefix = "PC"
) |>
ggplot(aes(PC1, PC2)) +
geom_segment(
xend = 0, yend = 0,
arrow = arrow_style
) +
geom_text_repel(aes(label = column)) +
xlim(-.5, 1) + ylim(-1, .5) +
coord_fixed()
#fetching the r-squared values for the principle components via eigenvalue plot
pca_fit |>
tidy(matrix = "eigenvalues") |>
ggplot(aes(PC, percent, fill = PC)) +
geom_col() +
scale_x_continuous(
breaks = 1:6
) +
scale_y_continuous(
name = "Variance Explained",
label = scales::label_percent(accuracy = 1)
) +
scale_fill_viridis_c() +
theme(legend.position = "none")
#joining the long version of stressor and colony
#dropping years with missing observations and filtering to national-level data
bees_bar <-
left_join(colony, stressor) |>
filter(year != 2019) |>
filter(state == "United States")
#using mutate() to generate a count of the total number of affected hives for each pest and year
#using group_by() and summarize() to generate a table with clear aesthetic assignments for ggplot
bees_bar <-
bees_bar |>
mutate(bees_affected = (colony_n * (stress_pct/100))) |>
group_by(stressor, months) |>
summarize(bees_affected = mean(bees_affected))
#using factor() to order the variables for ggplot()
bees_bar <-
bees_bar |>
mutate(months = factor(months, levels = c("January-March", "April-June", "July-September", "October-December")))
#creating a dataframe for the seasonal boxplots
bees_box <-
colony |>
filter(state != "United States") |>
mutate(colony_lost_pct = (colony_lost_pct/100))
#bar graph
ggplot(
) +
geom_col(data = bees_bar, aes(months, bees_affected, fill = stressor)
) +
labs(fill = "Stressor",
title = "Stressor proportion and colonies affected, by quarter"
) +
scale_x_discrete(name = "Quarter") +
scale_y_continuous(name = "Mean Affected Colonies",
labels = c("0", "1,000,000", "2,000,000", "3,000,000")) +
scale_fill_discrete(labels = c("Diseases", "Other", "Other pests/parasites", "Pesticides", "Unknown", "Varroa mites")) +
theme_minimal() +
theme(axis.text.x = element_text(
angle = 15))
#density plots of seasonal distributions of colony losses
bees_box |>
ggplot(
aes(colony_lost_pct, reorder(months, colony_lost_pct, na.rm = TRUE), fill = months)
) +
geom_boxplot() +
scale_x_continuous(name = "Colony Losses",
label = scales::label_percent(accuracy = 1)) +
scale_y_discrete(name = "Quarter") +
theme(legend.position = "none") +
labs(title = "Boxplots of state-level colony loss percentages, by quarter") +
theme_minimal()
# binning median_income values
texas_income <-
texas_income |>
mutate(
income_bin = case_when(
median_income < 40000 ~ "low",
median_income < 60000 ~ "medium",
median_income < 90000 ~ "high",
TRUE ~ "NA"
)
)
library(knitr)
library(tidyverse)
library(ggdendro)
library(sf)
library(colorspace)
opts_chunk$set(fig.align="center", fig.height=4.326, fig.width=7)
# data preparation
happiness <- read_csv("https://wilkelab.org/SDS375/datasets/happiness.csv")
head(happiness)
# calculating the distance matrix
dist_out <-
happiness |>
column_to_rownames(var = "country") |>
scale() |>
dist(method = "euclidean")
# hierarchical clustering output
hc_out <- hclust(
dist_out, method = "average"
)
# displaying the results in a dendrogram
ggdendrogram(hc_out, rotate = TRUE)
# cutting clusters using cutree
cluster <- cutree(hc_out, k = 3)
cluster
happiness |>
left_join(
tibble(
country = names(cluster),
cluster = factor(cluster)
)
) |>
ggplot(aes(GDP, family_score)) +
geom_point(aes(color = cluster))
# data preparation
texas_income <- readRDS(url("https://wilkelab.org/SDS375/datasets/Texas_income.rds"))
head(texas_income)
test <- texas_income %>%
mutate(Bin_Num = case_when(between(median_income, 20000, 40000) ~ 1,
between(median_income, 40001, 60000) ~ 2,
between(median_income, 60001, 90000) ~ 3,
TRUE ~ 0)) %>%
select(county, median_income, Bin_Num)
test %>%
ggplot(aes(fill = median_income)) +
geom_sf() +
scale_fill_viridis_b() +
theme_minimal() +
xlab("Latitude") +
ylab("Longitude") +
coord_sf(crs = 3083)
?scale_fill_viridis_b
View(stresses)
View(stressor)
#wb_data can pull data long and merge them but I'll be doing both manually
gdp <- wb_data("NY.GDP.MKTP.PP.KD")
library(knitr)
library(wbstats)
library(tidyverse)
library(readr)
library(httr)
#it's in the API, but I'm getting a bunch of 404 codes everywhere so I'll have to use another metric
#looks like it's several of the GDP indicators having this issue
wb_search("NY.GDP.MKTP.PP.CD")
#wb_data can pull data long and merge them but I'll be doing both manually
gdp <- wb_data("NY.GDP.MKTP.PP.KD")
View(gdp)
migrant <- wb_data("SM.POP.TOTL.ZS")
#merging by iso2c country codes and year
wb_wide <-
left_join(gdp, migrant, by = c("iso2c", "date"))
head(wb_wide)
#converting to long
gdp_long <-
gdp |>
gather(indicator, value, NY.GDP.MKTP.PP.KD)
View(gdp_long)
